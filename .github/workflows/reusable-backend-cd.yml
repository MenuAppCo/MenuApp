name: Reusable Backend CD

on:
  workflow_call:
    inputs:
      image-path:
        description: 'image path'
        required: true
        type: string
      image-uri:
        description: 'image uri to upload ecr'
        required: true
        type: string
      branch-name:
        description: 'currente branch name'
        required: true
        type: string
      env-vars:
        required: false
        description: 'json file of key pairs env vars'
        type: string
        default: ''
    outputs:
      image-tag:
        description: "Generated image tag"
        value: ${{ jobs.cd-backend.outputs.image_tag }}
permissions:
  id-token: write
  contents: read
jobs:
  cd-backend:
    if: inputs.branch-name == 'master' 
    name: cd-backend
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.export-tag.outputs.image_tag }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Parse env-vars JSON into $GITHUB_ENV
      if: inputs.env-vars != ''
      run: |
        echo '${{ inputs.env-vars }}' | base64 -d > tmp-env.json
        for key in $(jq -r 'keys[]' tmp-env.json); do
          value=$(jq -r ".\"$key\"" tmp-env.json)
          echo "$key=$value" >> $GITHUB_ENV
        done

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: arn:aws:iam::084519756118:role/GithubActions
        aws-region: us-east-1
        audience: "sts.amazonaws.com"
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Extract short SHA and set image URI
      id: prep
      run: |
        SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-8)
        IMAGE_TAG="$SHORT_SHA"
        IMAGE_URI_WITH_TAG="${{ inputs.image-uri }}:$IMAGE_TAG"
        echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
        echo "IMAGE_URI_WITH_TAG=$IMAGE_URI_WITH_TAG" >> $GITHUB_ENV
   
    - name: Export image tag (SHA)
      id: export-tag
      run: echo "image_tag=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT

    - name: Build Docker image
      run: docker build  -t $IMAGE_URI_WITH_TAG ${{ inputs.image-path }}

    - name: Push Docker image to ECR
      run: docker push $IMAGE_URI_WITH_TAG